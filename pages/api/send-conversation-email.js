// Email notification API for conversation transcripts
import nodemailer from 'nodemailer'

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { sessionId, conversation, analytics } = req.body

    // Create transporter (using Gmail as example - you can use any SMTP service)
    const transporter = nodemailer.createTransporter({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER, // Your email
        pass: process.env.EMAIL_PASS  // Your app password
      }
    })

    // Format conversation for email
    const formatConversation = (messages) => {
      return messages.map((msg, index) => {
        const timestamp = new Date(msg.timestamp || Date.now()).toLocaleString()
        const role = msg.role === 'user' ? 'VISITOR' : 'AI ASSISTANT'
        return `[${timestamp}] ${role}: ${msg.content}\n`
      }).join('\n')
    }

    // Calculate conversation metrics
    const userMessages = conversation.messages.filter(msg => msg.role === 'user')
    const duration = conversation.conversationEnded && conversation.conversationStarted 
      ? Math.round((new Date(conversation.conversationEnded) - new Date(conversation.conversationStarted)) / (1000 * 60))
      : 0

    // Email content
    const emailSubject = `New Conversation: ${userMessages[0]?.content.substring(0, 50)}...`
    const emailBody = `
ðŸ¤– NEW CONVERSATION TRANSCRIPT - Bttr.AI

ðŸ“Š CONVERSATION METRICS:
â€¢ Session ID: ${sessionId}
â€¢ Started: ${new Date(conversation.conversationStarted).toLocaleString()}
â€¢ Duration: ${duration} minutes
â€¢ User Messages: ${userMessages.length}
â€¢ Total Messages: ${conversation.messages.length}
â€¢ IP Address: ${conversation.metadata?.ip || 'Unknown'}
â€¢ User Agent: ${conversation.metadata?.userAgent || 'Unknown'}
â€¢ Referrer: ${conversation.metadata?.referer || 'Direct'}

ðŸ’¬ CONVERSATION TRANSCRIPT:
${formatConversation(conversation.messages)}

ðŸ“ˆ CONVERSATION ANALYSIS:
â€¢ Engagement Level: ${userMessages.length >= 5 ? 'HIGH' : userMessages.length >= 3 ? 'MEDIUM' : 'LOW'}
â€¢ Topic Interest: ${conversation.lastUserMessage}
â€¢ Conversion Potential: ${conversation.messages.some(m => m.content.toLowerCase().includes('contact') || m.content.toLowerCase().includes('email') || m.content.toLowerCase().includes('calendly')) ? 'HIGH - Contact Intent Detected' : 'MEDIUM'}

ðŸŽ¯ SUGGESTED FOLLOW-UP:
${userMessages.length >= 3 ? 'Send personalized follow-up email within 24 hours' : 'Add to nurture sequence'}

---
Generated by Bttr.AI Analytics
View Dashboard: https://bttr-ai.com/admin/conversations
`

    // Send email
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: process.env.NOTIFICATION_EMAIL || process.env.EMAIL_USER,
      subject: emailSubject,
      text: emailBody
    }

    await transporter.sendMail(mailOptions)

    console.log(`Conversation email sent for session: ${sessionId}`)
    res.status(200).json({ 
      success: true, 
      message: 'Email notification sent successfully' 
    })

  } catch (error) {
    console.error('Error sending conversation email:', error)
    res.status(500).json({ 
      error: 'Failed to send email notification',
      details: error.message 
    })
  }
}